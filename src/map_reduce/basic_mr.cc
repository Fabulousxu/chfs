#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#include "map_reduce/protocol.h"

namespace mapReduce{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
    std::vector<KeyVal> Map(const std::string &content) {
        // Hints: split contents into an array of words.
        std::vector<KeyVal> ret;
        std::string word;
        for (auto it = content.begin(); ; it++) {
            if (it != content.end() && isalpha(*it)) {
                word += *it;
            } else if (!word.empty()) {
                bool exist = false;
                for (auto &[key, val] : ret) {
                    if (word == key) {
                        exist = true;
                        val = std::to_string(std::stoi(val) + 1);
                        break;
                    }
                }
                if (!exist)
                    ret.push_back({word, "1"});
                word.clear();
            }
            if (it == content.end()) break;
        }
        return ret;

    }

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        // Hints: return the number of occurrences of the word.
        std::string ret = "0";
        for (auto val : values)
            ret = std::to_string(std::stoi(ret) + std::stoi(val));
        return ret;
    }
}